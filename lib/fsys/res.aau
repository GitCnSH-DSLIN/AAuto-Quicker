//res 资源文件
import fsys;
namespace fsys.res;
 
EnumResourceNames = ::Kernel32.api( "EnumResourceNames", "bool(pointer hModule,str type,pointer func,pointer lParam)"); 
BeginUpdateResource = ::Kernel32.api( "BeginUpdateResourceA", "pointer(string filename,bool delExisting)");
EndUpdateResource  = ::Kernel32.api( "EndUpdateResourceA", "bool(pointer hUpdate,bool fDiscard)");
UpdateResource  = ::Kernel32.api( "UpdateResourceA", "bool(pointer hUpdate,string type,string name,WORD lang,string data,INT cb)");
     
open = function(path,delExisting){
	path = ..io.exist(path);
	if(!path) error("错误的文件路径",2);
	
	var hUpdate = BeginUpdateResource(path,delExisting);
	if( hUpdate ) return {
		update = function(resType,resName,resData,lang=0){
			if( type(resType) == type.number ) resType = topointer(resType);
			if( type(resName) == type.number ) resName = topointer(resName);
			return UpdateResource(hUpdate, resType,resName,lang,resData,#resData);
		};
		close = function(fDiscard){
			return EndUpdateResource( hUpdate,fDiscard)
		} 
	}
}
    
enum = function( proc,resType = "RES",module=_HINSTANSE ){
	var proc_c = ..raw.tostdcall(
		function(hModule,stype,name,lParam){
			if( stype & 0xFFFF0000 ){
				stype = ..raw.str( topointer(stype) )
			}
			if( name & 0xFFFF0000 ){
				name = ..raw.str( topointer(name) )
			}
			return proc( hModule,stype,name,lParam);
		} ,"(pointer hModule,int stype,int name,pointer lParam)"
	);
	resType = makeIntResource(resType) : resType;
	EnumResourceNames(module,resType,proc_c )
}
 
makeIntResource = function(nRes){ 
	if( type(nRes) == type.number ){
		return  ..raw.convert( {word w = nRes },{pointer s} ).s;
	} 
} 

saveRes = function(srcDir="/",target="/"){
	if( _STUDIO_INVOKED ){ 
		return ..fsys.copy(srcDir,..fsys.createDir(target));
	}
	
	srcDir = ..string.upper( ..string.replace(srcDir,"\\","/") );
	if( srcDir[1] != '/'#)
		error("源路径必须以斜杠开始",2)
	enum(
		function(module,resType,resName){
			if( ..string.startWith(resName,srcDir) ){
				var str = ..string.load( resName )
				var path = ..fsys.joinpath(target,resName)
				..fsys.createDir( ..fsys.getParentDir(path)  )
				..string.save( path,str ) 
			}
			return true;
		},"RES"
	)
}

/**intellisense(fsys.res)
enum  = @.enum(\n	function(module,resType,resName){ \n		return true;\n	}\n)
saveRes(.(源目录,目标目录) = 保存内嵌资源目录为硬盘文件\n源目录可指定源目录路径\n所有参数可省略
makeIntResource(__) = 将数值类型资源名,或资源类型名转换为指针.
end intellisense**/

/**intellisense()
fsys.res.open() = !fsys_res_updater.
!fsys_res_updater.update(.(资源类型,资源名,数据) = 更新或添加资源
!fsys_res_updater.close(.(是否丢弃更改) = 关闭并更新资源,\n参数可选，默认为false
fsys.res.open(.(执行文件路径,是否删除旧的资源) = 打开资源准备更新
end intellisense**/