//imageList 图像索引列表
/************************************
Author		: lujjjh
Date		: 2010.9
************************************/
import win.image;
import com.picture;

namespace win {
	imageList = class {
		ctor (v1 = 0, v2 = -1) {
			if (v2 == -1) {
				this.handle = v1;
				var re, cx, cy = ::ImageList_GetIconSize(this.handle, 0, 0);
				this.width = cx;
				this.height = cy;
			}
			else {
				this.handle = ::ImageList_Create(v1, v2, 0x00000020 | 0x1/*_ILC_MASK*/, 0, 1);
				this.width = v1;
				this.height = v2;
			}
		};
		
		add = function (pic, color=0xff00ff) { 
			var iPic = ..com.picture.load(pic);
			if(!iPic)
				error("加载图片失败",2)
				
			var hbmp = iPic.handle; 
			::ImageList_AddMasked(this.handle, topointer(hbmp), color);
			::DeleteObject(topointer(hbmp));
			..com.Release(iPic)
			return this;
		};
		
		addIcon = function (iconData) {
			var hIcon = ..win.image.createIconFromResource(iconData,this.width);
			::ImageList_ReplaceIcon(this.handle, -1, hIcon);
			return this;
		};
		
		draw = function(i,hdc,x,y,fStyle=1/*_ILD_TRANSPARENT*/){
			::ImageList_Draw(this.handle,i,hdc,x,y,fStyle)
		}; 
		@_meta
	}
	imagelist = imageList;
}

namespace win.imageList {
	_meta = {
		_topointer = function(){ 
			return owner.handle;
		} 
	}
	
	/*intellisense(::)*/
	::Comctl32 := ..raw.loadDll("Comctl32.dll");
	::ImageList_Create := ::Comctl32.api("ImageList_Create", "pointer(int cx, int cy, INT flags, int cInitial, int cGrow)");
	::ImageList_AddMasked = ::Comctl32.api("ImageList_AddMasked", "int(POINTER himl, pointer hbmImage, int crMask)");
	::ImageList_GetIconSize = ::Comctl32.api("ImageList_GetIconSize","int(POINTER himl, int &cx, int &cy)");
	::ImageList_ReplaceIcon = ::Comctl32.api("ImageList_ReplaceIcon","int(POINTER himl, int i, pointer hicon)");
	::ImageList_Draw = ::Comctl32.api("ImageList_Draw","int(POINTER himl, int i, POINTER hdcDst,int x,int y,INT fStyle)"); 
	/*end intellisense*/ 
} 

/**intellisense(win)
imageList = 图像列表\n用于工具条、树形控件等
imageList(__/*句柄*/)  = 通过句柄创建一个 imageList
imageList(.(宽度,高度)  = 创建一个 imageList
end intellisense**/

/**intellisense()  
win.imageList() = !imageList.
!imagelist.add("__/*图片路径*/",0xFF00FF/*透明色*/) = 向 imageList中添加图片\n该函数返回当前win.imageList对象
!imagelist.draw(.(索引,hDC,x,y,fStyle) = 绘图
!imagelist.width = 宽度
!imagelist.height = 高度
end intellisense**/

 /**intellisense()
_ILD_NORMAL=@0/*_ILD_NORMAL*/
_ILD_TRANSPARENT=@1/*_ILD_TRANSPARENT*/
_ILD_MASK=@0x10/*_ILD_MASK*/
_ILD_IMAGE=@0x20/*_ILD_IMAGE*/
_ILD_ROP=@0x40/*_ILD_ROP*/
_ILD_BLEND25=@2/*_ILD_BLEND25*/
_ILD_BLEND50=@4/*_ILD_BLEND50*/
_ILD_OVERLAYMASK=@0xF00/*_ILD_OVERLAYMASK*/
_ILD_PRESERVEALPHA=@0x1000/*_ILD_PRESERVEALPHA*/
_ILD_SCALE=@0x2000/*_ILD_SCALE*/
_ILD_DPISCALE=@0x4000/*_ILD_DPISCALE*/
_ILD_ASYNC=@0x8000/*_ILD_ASYNC*/
_ILS_NORMAL=@0/*_ILS_NORMAL*/
_ILS_GLOW=@1/*_ILS_GLOW*/
_ILS_SHADOW=@2/*_ILS_SHADOW*/
_ILS_SATURATE=@4/*_ILS_SATURATE*/
_ILS_ALPHA=@8/*_ILS_ALPHA*/
_ILC_MASK=@1/*_ILC_MASK*/
_ILC_COLOR=@0/*_ILC_COLOR*/
_ILC_COLORDDB=@0xFE/*_ILC_COLORDDB*/
_ILC_COLOR4=@4/*_ILC_COLOR4*/
_ILC_COLOR8=@8/*_ILC_COLOR8*/
_ILC_COLOR16=@0x10/*_ILC_COLOR16*/
_ILC_COLOR24=@0x18/*_ILC_COLOR24*/
_ILC_COLOR32=@0x20/*_ILC_COLOR32*/
_ILC_PALETTE=@0x800/*_ILC_PALETTE*/
_ILC_MIRROR=@0x2000/*_ILC_MIRROR*/
_ILC_PERITEMMIRROR=@0x8000/*_ILC_PERITEMMIRROR*/
end intellisense**/

